{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState){\n        this.size = 4;\n        this.score = 0;\n        this.status = \"idle\"; // 'idle', 'playing', 'win', 'lose'\n        this.board = initialState || Array(this.size).fill().map(()=>Array(this.size).fill(0));\n        this.won = false;\n    }\n    move(direction) {\n        if (this.status !== \"playing\") return false;\n        let moved = false;\n        switch(direction){\n            case \"left\":\n                moved = this.moveLeft();\n                break;\n            case \"right\":\n                moved = this.moveRight();\n                break;\n            case \"up\":\n                moved = this.moveUp();\n                break;\n            case \"down\":\n                moved = this.moveDown();\n                break;\n        }\n        if (moved) {\n            this.addNewTile();\n            this.checkGameStatus();\n        }\n        return moved;\n    }\n    moveLeft() {\n        return this.moveHorizontal(\"left\");\n    }\n    moveRight() {\n        return this.moveHorizontal(\"right\");\n    }\n    moveUp() {\n        return this.moveVertical(\"up\");\n    }\n    moveDown() {\n        return this.moveVertical(\"down\");\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.board;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        return this.status;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.status = \"playing\";\n        if (this.isBoardEmpty()) {\n            this.addNewTile();\n            this.addNewTile();\n        }\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.board = Array(this.size).fill().map(()=>Array(this.size).fill(0));\n        this.score = 0;\n        this.status = \"playing\";\n        this.won = false;\n        this.addNewTile();\n        this.addNewTile();\n    }\n    isBoardEmpty() {\n        return this.board.every((row)=>row.every((cell)=>cell === 0));\n    }\n    getEmptyCells() {\n        const emptyCells = [];\n        for(let i = 0; i < this.size; i++){\n            for(let j = 0; j < this.size; j++)if (this.board[i][j] === 0) emptyCells.push([\n                i,\n                j\n            ]);\n        }\n        return emptyCells;\n    }\n    addNewTile() {\n        const emptyCells = this.getEmptyCells();\n        if (emptyCells.length) {\n            const [row, col] = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n            this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n        }\n    }\n    moveHorizontal(direction) {\n        let moved = false;\n        for(let i = 0; i < this.size; i++){\n            const row = direction === \"left\" ? this.board[i].filter((x)=>x !== 0) : this.board[i].filter((x)=>x !== 0).reverse();\n            const merged = this.mergeTiles(row);\n            const newRow = direction === \"left\" ? [\n                ...merged,\n                ...Array(this.size - merged.length).fill(0)\n            ] : [\n                ...Array(this.size - merged.length).fill(0),\n                ...merged.reverse()\n            ];\n            if (JSON.stringify(this.board[i]) !== JSON.stringify(newRow)) moved = true;\n            this.board[i] = newRow;\n        }\n        return moved;\n    }\n    moveVertical(direction) {\n        let moved = false;\n        for(let j = 0; j < this.size; j++){\n            const column = this.board.map((row)=>row[j]).filter((x)=>x !== 0);\n            if (direction === \"down\") column.reverse();\n            const merged = this.mergeTiles(column);\n            const newColumn = direction === \"up\" ? [\n                ...merged,\n                ...Array(this.size - merged.length).fill(0)\n            ] : [\n                ...Array(this.size - merged.length).fill(0),\n                ...merged.reverse()\n            ];\n            if (JSON.stringify(this.board.map((row)=>row[j])) !== JSON.stringify(newColumn)) moved = true;\n            for(let i = 0; i < this.size; i++)this.board[i][j] = newColumn[i];\n        }\n        return moved;\n    }\n    mergeTiles(tiles) {\n        const merged = [];\n        for(let i = 0; i < tiles.length; i++)if (i < tiles.length - 1 && tiles[i] === tiles[i + 1]) {\n            const mergedValue = tiles[i] * 2;\n            merged.push(mergedValue);\n            this.score += mergedValue;\n            if (mergedValue === 2048 && !this.won) {\n                this.won = true;\n                this.status = \"win\";\n            }\n            i++;\n        } else merged.push(tiles[i]);\n        return merged;\n    }\n    checkGameStatus() {\n        if (this.won) return;\n        // Check if there are any empty cells\n        if (this.getEmptyCells().length > 0) return;\n        // Check if any moves are possible\n        for(let i = 0; i < this.size; i++)for(let j = 0; j < this.size; j++){\n            const current = this.board[i][j];\n            const neighbors = [\n                [\n                    i - 1,\n                    j\n                ],\n                [\n                    i + 1,\n                    j\n                ],\n                [\n                    i,\n                    j - 1\n                ],\n                [\n                    i,\n                    j + 1\n                ]\n            ];\n            for (const [ni, nj] of neighbors)if (ni >= 0 && ni < this.size && nj >= 0 && nj < this.size) {\n                if (this.board[ni][nj] === current) return;\n            }\n        }\n        this.status = \"lose\";\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    const game = new $a5fd07fa01589658$exports();\n    const gameBoard = document.querySelector(\".game-field\");\n    const startButton = document.querySelector(\".button\");\n    const startMessage = document.querySelector(\".message-start\");\n    const gameOverMessage = document.querySelector(\".message-lose\");\n    const winMessage = document.querySelector(\".message-win\");\n    const scoreElement = document.querySelector(\".game-score\");\n    function updateBoard() {\n        const state = game.getState();\n        const cells = gameBoard.querySelectorAll(\".field-cell\");\n        cells.forEach((cell, index)=>{\n            const row = Math.floor(index / 4);\n            const col = index % 4;\n            const value = state[row][col];\n            cell.className = \"field-cell\";\n            if (value > 0) cell.classList.add(`field-cell--${value}`);\n            cell.textContent = value || \"\";\n        });\n        scoreElement.textContent = game.getScore();\n    }\n    function updateGameStatus() {\n        const gameStatus = game.getStatus();\n        startMessage.classList.toggle(\"hidden\", gameStatus !== \"idle\");\n        gameOverMessage.classList.toggle(\"hidden\", gameStatus !== \"lose\");\n        winMessage.classList.toggle(\"hidden\", gameStatus !== \"win\");\n        startButton.classList.toggle(\"start\", gameStatus === \"idle\");\n        startButton.classList.toggle(\"restart\", gameStatus !== \"idle\");\n        startButton.textContent = gameStatus === \"idle\" ? \"Start\" : \"Restart\";\n    }\n    startButton.addEventListener(\"click\", ()=>{\n        if (game.getStatus() === \"idle\") game.start();\n        else game.restart();\n        updateBoard();\n        updateGameStatus();\n    });\n    document.addEventListener(\"keydown\", (e)=>{\n        if (game.getStatus() !== \"playing\") return;\n        let moved = false;\n        switch(e.key){\n            case \"ArrowLeft\":\n                moved = game.move(\"left\");\n                break;\n            case \"ArrowRight\":\n                moved = game.move(\"right\");\n                break;\n            case \"ArrowUp\":\n                moved = game.move(\"up\");\n                break;\n            case \"ArrowDown\":\n                moved = game.move(\"down\");\n                break;\n        }\n        if (moved) {\n            updateBoard();\n            updateGameStatus();\n        }\n    });\n});\n\n\n//# sourceMappingURL=index.7ec778b6.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class.js');\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const game = new Game();\n  const gameBoard = document.querySelector('.game-field');\n  const startButton = document.querySelector('.button');\n  const startMessage = document.querySelector('.message-start');\n  const gameOverMessage = document.querySelector('.message-lose');\n  const winMessage = document.querySelector('.message-win');\n  const scoreElement = document.querySelector('.game-score');\n\n  function updateBoard() {\n    const state = game.getState();\n    const cells = gameBoard.querySelectorAll('.field-cell');\n\n    cells.forEach((cell, index) => {\n      const row = Math.floor(index / 4);\n      const col = index % 4;\n      const value = state[row][col];\n\n      cell.className = 'field-cell';\n\n      if (value > 0) {\n        cell.classList.add(`field-cell--${value}`);\n      }\n      cell.textContent = value || '';\n    });\n\n    scoreElement.textContent = game.getScore();\n  }\n\n  function updateGameStatus() {\n    const gameStatus = game.getStatus();\n\n    startMessage.classList.toggle('hidden', gameStatus !== 'idle');\n    gameOverMessage.classList.toggle('hidden', gameStatus !== 'lose');\n    winMessage.classList.toggle('hidden', gameStatus !== 'win');\n\n    startButton.classList.toggle('start', gameStatus === 'idle');\n    startButton.classList.toggle('restart', gameStatus !== 'idle');\n    startButton.textContent = gameStatus === 'idle' ? 'Start' : 'Restart';\n  }\n\n  startButton.addEventListener('click', () => {\n    if (game.getStatus() === 'idle') {\n      game.start();\n    } else {\n      game.restart();\n    }\n    updateBoard();\n    updateGameStatus();\n  });\n\n  document.addEventListener('keydown', (e) => {\n    if (game.getStatus() !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n\n    switch (e.key) {\n      case 'ArrowLeft':\n        moved = game.move('left');\n        break;\n      case 'ArrowRight':\n        moved = game.move('right');\n        break;\n      case 'ArrowUp':\n        moved = game.move('up');\n        break;\n      case 'ArrowDown':\n        moved = game.move('down');\n        break;\n    }\n\n    if (moved) {\n      updateBoard();\n      updateGameStatus();\n    }\n  });\n});\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState) {\n    this.size = 4;\n    this.score = 0;\n    this.status = 'idle'; // 'idle', 'playing', 'win', 'lose'\n\n    this.board\n      = initialState\n      || Array(this.size)\n        .fill()\n        .map(() => Array(this.size).fill(0));\n    this.won = false;\n  }\n\n  move(direction) {\n    if (this.status !== 'playing') {\n      return false;\n    }\n\n    let moved = false;\n\n    switch (direction) {\n      case 'left':\n        moved = this.moveLeft();\n        break;\n      case 'right':\n        moved = this.moveRight();\n        break;\n      case 'up':\n        moved = this.moveUp();\n        break;\n      case 'down':\n        moved = this.moveDown();\n        break;\n    }\n\n    if (moved) {\n      this.addNewTile();\n      this.checkGameStatus();\n    }\n\n    return moved;\n  }\n\n  moveLeft() {\n    return this.moveHorizontal('left');\n  }\n  moveRight() {\n    return this.moveHorizontal('right');\n  }\n  moveUp() {\n    return this.moveVertical('up');\n  }\n  moveDown() {\n    return this.moveVertical('down');\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.board;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.status = 'playing';\n\n    if (this.isBoardEmpty()) {\n      this.addNewTile();\n      this.addNewTile();\n    }\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.board = Array(this.size)\n      .fill()\n      .map(() => Array(this.size).fill(0));\n    this.score = 0;\n    this.status = 'playing';\n    this.won = false;\n    this.addNewTile();\n    this.addNewTile();\n  }\n\n  isBoardEmpty() {\n    return this.board.every((row) => row.every((cell) => cell === 0));\n  }\n\n  getEmptyCells() {\n    const emptyCells = [];\n\n    for (let i = 0; i < this.size; i++) {\n      for (let j = 0; j < this.size; j++) {\n        if (this.board[i][j] === 0) {\n          emptyCells.push([i, j]);\n        }\n      }\n    }\n\n    return emptyCells;\n  }\n\n  addNewTile() {\n    const emptyCells = this.getEmptyCells();\n\n    if (emptyCells.length) {\n      const [row, col]\n        = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  moveHorizontal(direction) {\n    let moved = false;\n\n    for (let i = 0; i < this.size; i++) {\n      const row\n        = direction === 'left'\n          ? this.board[i].filter((x) => x !== 0)\n          : this.board[i].filter((x) => x !== 0).reverse();\n\n      const merged = this.mergeTiles(row);\n      const newRow\n        = direction === 'left'\n          ? [...merged, ...Array(this.size - merged.length).fill(0)]\n          : [...Array(this.size - merged.length).fill(0), ...merged.reverse()];\n\n      if (JSON.stringify(this.board[i]) !== JSON.stringify(newRow)) {\n        moved = true;\n      }\n      this.board[i] = newRow;\n    }\n\n    return moved;\n  }\n\n  moveVertical(direction) {\n    let moved = false;\n\n    for (let j = 0; j < this.size; j++) {\n      const column = this.board.map((row) => row[j]).filter((x) => x !== 0);\n\n      if (direction === 'down') {\n        column.reverse();\n      }\n\n      const merged = this.mergeTiles(column);\n      const newColumn\n        = direction === 'up'\n          ? [...merged, ...Array(this.size - merged.length).fill(0)]\n          : [...Array(this.size - merged.length).fill(0), ...merged.reverse()];\n\n      if (\n        JSON.stringify(this.board.map((row) => row[j]))\n        !== JSON.stringify(newColumn)\n      ) {\n        moved = true;\n      }\n\n      for (let i = 0; i < this.size; i++) {\n        this.board[i][j] = newColumn[i];\n      }\n    }\n\n    return moved;\n  }\n\n  mergeTiles(tiles) {\n    const merged = [];\n\n    for (let i = 0; i < tiles.length; i++) {\n      if (i < tiles.length - 1 && tiles[i] === tiles[i + 1]) {\n        const mergedValue = tiles[i] * 2;\n\n        merged.push(mergedValue);\n        this.score += mergedValue;\n\n        if (mergedValue === 2048 && !this.won) {\n          this.won = true;\n          this.status = 'win';\n        }\n        i++;\n      } else {\n        merged.push(tiles[i]);\n      }\n    }\n\n    return merged;\n  }\n\n  checkGameStatus() {\n    if (this.won) {\n      return;\n    }\n\n    // Check if there are any empty cells\n    if (this.getEmptyCells().length > 0) {\n      return;\n    }\n\n    // Check if any moves are possible\n    for (let i = 0; i < this.size; i++) {\n      for (let j = 0; j < this.size; j++) {\n        const current = this.board[i][j];\n        const neighbors = [\n          [i - 1, j],\n          [i + 1, j],\n          [i, j - 1],\n          [i, j + 1],\n        ];\n\n        for (const [ni, nj] of neighbors) {\n          if (ni >= 0 && ni < this.size && nj >= 0 && nj < this.size) {\n            if (this.board[ni][nj] === current) {\n              return;\n            }\n          }\n        }\n      }\n    }\n\n    this.status = 'lose';\n  }\n}\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$exports","constructor","initialState","size","score","status","board","Array","fill","map","won","move","direction","moved","moveLeft","moveRight","moveUp","moveDown","addNewTile","checkGameStatus","moveHorizontal","moveVertical","getScore","getState","getStatus","start","isBoardEmpty","restart","every","row","cell","getEmptyCells","emptyCells","i","j","push","length","col","Math","floor","random","filter","x","reverse","merged","mergeTiles","newRow","JSON","stringify","column","newColumn","tiles","mergedValue","current","ni","nj","document","addEventListener","game","gameBoard","querySelector","startButton","startMessage","gameOverMessage","winMessage","scoreElement","updateBoard","state","cells","querySelectorAll","forEach","index","value","className","classList","add","textContent","updateGameStatus","gameStatus","toggle","e","key"],"version":3,"file":"index.7ec778b6.js.map"}