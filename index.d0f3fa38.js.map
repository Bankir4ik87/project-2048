{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_sliced_to_array.js","node_modules/@swc/helpers/esm/_array_with_holes.js","node_modules/@swc/helpers/esm/_iterable_to_array_limit.js","node_modules/@swc/helpers/esm/_non_iterable_rest.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js","node_modules/@swc/helpers/esm/_array_like_to_array.js","node_modules/@swc/helpers/esm/_to_consumable_array.js","node_modules/@swc/helpers/esm/_array_without_holes.js","node_modules/@swc/helpers/esm/_iterable_to_array.js","node_modules/@swc/helpers/esm/_non_iterable_spread.js"],"sourcesContent":["(function () {\n\"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$71511d61b312f219(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$71511d61b312f219(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $09cbfe85151ea6c6$export$71511d61b312f219(arr) {\n    if (Array.isArray(arr)) return arr;\n}\n\n\nfunction $8ca2848f896a6803$export$71511d61b312f219(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n    try {\n        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\n\n\nfunction $a0bc1859061deae1$export$71511d61b312f219() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\nfunction $c3b10a83b523f372$export$71511d61b312f219(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction $d4f69c5c6c4654b1$export$71511d61b312f219(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n}\n\n\nfunction $efec029548ccee7f$export$71511d61b312f219(arr, i) {\n    return (0, $09cbfe85151ea6c6$export$71511d61b312f219)(arr) || (0, $8ca2848f896a6803$export$71511d61b312f219)(arr, i) || (0, $d4f69c5c6c4654b1$export$71511d61b312f219)(arr, i) || (0, $a0bc1859061deae1$export$71511d61b312f219)();\n}\n\n\n\nfunction $c50969dc1df61e8b$export$71511d61b312f219(arr) {\n    if (Array.isArray(arr)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(arr);\n}\n\n\nfunction $09c9f293d010c0e1$export$71511d61b312f219(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\n\nfunction $38c2d4931cb7a7c4$export$71511d61b312f219() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\n\nfunction $227c6742e0ff6f82$export$71511d61b312f219(arr) {\n    return (0, $c50969dc1df61e8b$export$71511d61b312f219)(arr) || (0, $09c9f293d010c0e1$export$71511d61b312f219)(arr) || (0, $d4f69c5c6c4654b1$export$71511d61b312f219)(arr) || (0, $38c2d4931cb7a7c4$export$71511d61b312f219)();\n}\n\n\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ var $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game(initialState) {\n        var _this = this;\n        (0, $8713978b2328d32b$export$71511d61b312f219)(this, Game);\n        this.size = 4;\n        this.score = 0;\n        this.status = \"idle\"; // 'idle', 'playing', 'win', 'lose'\n        this.board = initialState || Array(this.size).fill().map(function() {\n            return Array(_this.size).fill(0);\n        });\n        this.won = false;\n    }\n    (0, $4fc75ccb937ab1df$export$71511d61b312f219)(Game, [\n        {\n            key: \"move\",\n            value: function move(direction) {\n                if (this.status !== \"playing\") return false;\n                var moved = false;\n                switch(direction){\n                    case \"left\":\n                        moved = this.moveLeft();\n                        break;\n                    case \"right\":\n                        moved = this.moveRight();\n                        break;\n                    case \"up\":\n                        moved = this.moveUp();\n                        break;\n                    case \"down\":\n                        moved = this.moveDown();\n                        break;\n                }\n                if (moved) {\n                    this.addNewTile();\n                    this.checkGameStatus();\n                }\n                return moved;\n            }\n        },\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                return this.moveHorizontal(\"left\");\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                return this.moveHorizontal(\"right\");\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                return this.moveVertical(\"up\");\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                return this.moveVertical(\"down\");\n            }\n        },\n        {\n            /**\n   * @returns {number}\n   */ key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            /**\n   * @returns {number[][]}\n   */ key: \"getState\",\n            value: function getState() {\n                return this.board;\n            }\n        },\n        {\n            /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ key: \"getStatus\",\n            value: function getStatus() {\n                return this.status;\n            }\n        },\n        {\n            /**\n   * Starts the game.\n   */ key: \"start\",\n            value: function start() {\n                this.status = \"playing\";\n                if (this.isBoardEmpty()) {\n                    this.addNewTile();\n                    this.addNewTile();\n                }\n            }\n        },\n        {\n            /**\n   * Resets the game.\n   */ key: \"restart\",\n            value: function restart() {\n                var _this = this;\n                this.board = Array(this.size).fill().map(function() {\n                    return Array(_this.size).fill(0);\n                });\n                this.score = 0;\n                this.status = \"playing\";\n                this.won = false;\n                this.addNewTile();\n                this.addNewTile();\n            }\n        },\n        {\n            key: \"isBoardEmpty\",\n            value: function isBoardEmpty() {\n                return this.board.every(function(row) {\n                    return row.every(function(cell) {\n                        return cell === 0;\n                    });\n                });\n            }\n        },\n        {\n            key: \"getEmptyCells\",\n            value: function getEmptyCells() {\n                var emptyCells = [];\n                for(var i = 0; i < this.size; i++){\n                    for(var j = 0; j < this.size; j++)if (this.board[i][j] === 0) emptyCells.push([\n                        i,\n                        j\n                    ]);\n                }\n                return emptyCells;\n            }\n        },\n        {\n            key: \"addNewTile\",\n            value: function addNewTile() {\n                var emptyCells = this.getEmptyCells();\n                if (emptyCells.length) {\n                    var _emptyCells_Math_floor = (0, $efec029548ccee7f$export$71511d61b312f219)(emptyCells[Math.floor(Math.random() * emptyCells.length)], 2), row = _emptyCells_Math_floor[0], col = _emptyCells_Math_floor[1];\n                    this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n                }\n            }\n        },\n        {\n            key: \"moveHorizontal\",\n            value: function moveHorizontal(direction) {\n                var moved = false;\n                for(var i = 0; i < this.size; i++){\n                    var row = direction === \"left\" ? this.board[i].filter(function(x) {\n                        return x !== 0;\n                    }) : this.board[i].filter(function(x) {\n                        return x !== 0;\n                    }).reverse();\n                    var merged = this.mergeTiles(row);\n                    var newRow = direction === \"left\" ? (0, $227c6742e0ff6f82$export$71511d61b312f219)(merged).concat((0, $227c6742e0ff6f82$export$71511d61b312f219)(Array(this.size - merged.length).fill(0))) : (0, $227c6742e0ff6f82$export$71511d61b312f219)(Array(this.size - merged.length).fill(0)).concat((0, $227c6742e0ff6f82$export$71511d61b312f219)(merged.reverse()));\n                    if (JSON.stringify(this.board[i]) !== JSON.stringify(newRow)) moved = true;\n                    this.board[i] = newRow;\n                }\n                return moved;\n            }\n        },\n        {\n            key: \"moveVertical\",\n            value: function moveVertical(direction) {\n                var _this = this, _loop = function(j) {\n                    var column = _this.board.map(function(row) {\n                        return row[j];\n                    }).filter(function(x) {\n                        return x !== 0;\n                    });\n                    if (direction === \"down\") column.reverse();\n                    var merged = _this.mergeTiles(column);\n                    var newColumn = direction === \"up\" ? (0, $227c6742e0ff6f82$export$71511d61b312f219)(merged).concat((0, $227c6742e0ff6f82$export$71511d61b312f219)(Array(_this.size - merged.length).fill(0))) : (0, $227c6742e0ff6f82$export$71511d61b312f219)(Array(_this.size - merged.length).fill(0)).concat((0, $227c6742e0ff6f82$export$71511d61b312f219)(merged.reverse()));\n                    if (JSON.stringify(_this.board.map(function(row) {\n                        return row[j];\n                    })) !== JSON.stringify(newColumn)) moved = true;\n                    for(var i = 0; i < _this.size; i++)_this.board[i][j] = newColumn[i];\n                };\n                var moved = false;\n                for(var j = 0; j < this.size; j++)_loop(j);\n                return moved;\n            }\n        },\n        {\n            key: \"mergeTiles\",\n            value: function mergeTiles(tiles) {\n                var merged = [];\n                for(var i = 0; i < tiles.length; i++)if (i < tiles.length - 1 && tiles[i] === tiles[i + 1]) {\n                    var mergedValue = tiles[i] * 2;\n                    merged.push(mergedValue);\n                    this.score += mergedValue;\n                    if (mergedValue === 2048 && !this.won) {\n                        this.won = true;\n                        this.status = \"win\";\n                    }\n                    i++;\n                } else merged.push(tiles[i]);\n                return merged;\n            }\n        },\n        {\n            key: \"checkGameStatus\",\n            value: function checkGameStatus() {\n                if (this.won) return;\n                // Check if there are any empty cells\n                if (this.getEmptyCells().length > 0) return;\n                // Check if any moves are possible\n                for(var i = 0; i < this.size; i++)for(var j = 0; j < this.size; j++){\n                    var current = this.board[i][j];\n                    var neighbors = [\n                        [\n                            i - 1,\n                            j\n                        ],\n                        [\n                            i + 1,\n                            j\n                        ],\n                        [\n                            i,\n                            j - 1\n                        ],\n                        [\n                            i,\n                            j + 1\n                        ]\n                    ];\n                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                    try {\n                        for(var _iterator = neighbors[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                            var _step_value = (0, $efec029548ccee7f$export$71511d61b312f219)(_step.value, 2), ni = _step_value[0], nj = _step_value[1];\n                            if (ni >= 0 && ni < this.size && nj >= 0 && nj < this.size) {\n                                if (this.board[ni][nj] === current) return;\n                            }\n                        }\n                    } catch (err) {\n                        _didIteratorError = true;\n                        _iteratorError = err;\n                    } finally{\n                        try {\n                            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                                _iterator.return();\n                            }\n                        } finally{\n                            if (_didIteratorError) {\n                                throw _iteratorError;\n                            }\n                        }\n                    }\n                }\n                this.status = \"lose\";\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    var updateBoard = function updateBoard() {\n        var state = game.getState();\n        var cells = gameBoard.querySelectorAll(\".field-cell\");\n        cells.forEach(function(cell, index) {\n            var row = Math.floor(index / 4);\n            var col = index % 4;\n            var value = state[row][col];\n            cell.className = \"field-cell\";\n            if (value > 0) cell.classList.add(\"field-cell--\".concat(value));\n            cell.textContent = value || \"\";\n        });\n        scoreElement.textContent = game.getScore();\n    };\n    var updateGameStatus = function updateGameStatus() {\n        var gameStatus = game.getStatus();\n        startMessage.classList.toggle(\"hidden\", gameStatus !== \"idle\");\n        gameOverMessage.classList.toggle(\"hidden\", gameStatus !== \"lose\");\n        winMessage.classList.toggle(\"hidden\", gameStatus !== \"win\");\n        startButton.classList.toggle(\"start\", gameStatus === \"idle\");\n        startButton.classList.toggle(\"restart\", gameStatus !== \"idle\");\n        startButton.textContent = gameStatus === \"idle\" ? \"Start\" : \"Restart\";\n    };\n    var game = new $3d28d7f1aac198f5$exports();\n    var gameBoard = document.querySelector(\".game-field\");\n    var startButton = document.querySelector(\".button\");\n    var startMessage = document.querySelector(\".message-start\");\n    var gameOverMessage = document.querySelector(\".message-lose\");\n    var winMessage = document.querySelector(\".message-win\");\n    var scoreElement = document.querySelector(\".game-score\");\n    startButton.addEventListener(\"click\", function() {\n        if (game.getStatus() === \"idle\") game.start();\n        else game.restart();\n        updateBoard();\n        updateGameStatus();\n    });\n    document.addEventListener(\"keydown\", function(e) {\n        if (game.getStatus() !== \"playing\") return;\n        var moved = false;\n        switch(e.key){\n            case \"ArrowLeft\":\n                moved = game.move(\"left\");\n                break;\n            case \"ArrowRight\":\n                moved = game.move(\"right\");\n                break;\n            case \"ArrowUp\":\n                moved = game.move(\"up\");\n                break;\n            case \"ArrowDown\":\n                moved = game.move(\"down\");\n                break;\n        }\n        if (moved) {\n            updateBoard();\n            updateGameStatus();\n        }\n    });\n});\n\n})();\n//# sourceMappingURL=index.d0f3fa38.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class.js');\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const game = new Game();\n  const gameBoard = document.querySelector('.game-field');\n  const startButton = document.querySelector('.button');\n  const startMessage = document.querySelector('.message-start');\n  const gameOverMessage = document.querySelector('.message-lose');\n  const winMessage = document.querySelector('.message-win');\n  const scoreElement = document.querySelector('.game-score');\n\n  function updateBoard() {\n    const state = game.getState();\n    const cells = gameBoard.querySelectorAll('.field-cell');\n\n    cells.forEach((cell, index) => {\n      const row = Math.floor(index / 4);\n      const col = index % 4;\n      const value = state[row][col];\n\n      cell.className = 'field-cell';\n\n      if (value > 0) {\n        cell.classList.add(`field-cell--${value}`);\n      }\n      cell.textContent = value || '';\n    });\n\n    scoreElement.textContent = game.getScore();\n  }\n\n  function updateGameStatus() {\n    const gameStatus = game.getStatus();\n\n    startMessage.classList.toggle('hidden', gameStatus !== 'idle');\n    gameOverMessage.classList.toggle('hidden', gameStatus !== 'lose');\n    winMessage.classList.toggle('hidden', gameStatus !== 'win');\n\n    startButton.classList.toggle('start', gameStatus === 'idle');\n    startButton.classList.toggle('restart', gameStatus !== 'idle');\n    startButton.textContent = gameStatus === 'idle' ? 'Start' : 'Restart';\n  }\n\n  startButton.addEventListener('click', () => {\n    if (game.getStatus() === 'idle') {\n      game.start();\n    } else {\n      game.restart();\n    }\n    updateBoard();\n    updateGameStatus();\n  });\n\n  document.addEventListener('keydown', (e) => {\n    if (game.getStatus() !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n\n    switch (e.key) {\n      case 'ArrowLeft':\n        moved = game.move('left');\n        break;\n      case 'ArrowRight':\n        moved = game.move('right');\n        break;\n      case 'ArrowUp':\n        moved = game.move('up');\n        break;\n      case 'ArrowDown':\n        moved = game.move('down');\n        break;\n    }\n\n    if (moved) {\n      updateBoard();\n      updateGameStatus();\n    }\n  });\n});\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState) {\n    this.size = 4;\n    this.score = 0;\n    this.status = 'idle'; // 'idle', 'playing', 'win', 'lose'\n\n    this.board\n      = initialState\n      || Array(this.size)\n        .fill()\n        .map(() => Array(this.size).fill(0));\n    this.won = false;\n  }\n\n  move(direction) {\n    if (this.status !== 'playing') {\n      return false;\n    }\n\n    let moved = false;\n\n    switch (direction) {\n      case 'left':\n        moved = this.moveLeft();\n        break;\n      case 'right':\n        moved = this.moveRight();\n        break;\n      case 'up':\n        moved = this.moveUp();\n        break;\n      case 'down':\n        moved = this.moveDown();\n        break;\n    }\n\n    if (moved) {\n      this.addNewTile();\n      this.checkGameStatus();\n    }\n\n    return moved;\n  }\n\n  moveLeft() {\n    return this.moveHorizontal('left');\n  }\n  moveRight() {\n    return this.moveHorizontal('right');\n  }\n  moveUp() {\n    return this.moveVertical('up');\n  }\n  moveDown() {\n    return this.moveVertical('down');\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.board;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.status = 'playing';\n\n    if (this.isBoardEmpty()) {\n      this.addNewTile();\n      this.addNewTile();\n    }\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.board = Array(this.size)\n      .fill()\n      .map(() => Array(this.size).fill(0));\n    this.score = 0;\n    this.status = 'playing';\n    this.won = false;\n    this.addNewTile();\n    this.addNewTile();\n  }\n\n  isBoardEmpty() {\n    return this.board.every((row) => row.every((cell) => cell === 0));\n  }\n\n  getEmptyCells() {\n    const emptyCells = [];\n\n    for (let i = 0; i < this.size; i++) {\n      for (let j = 0; j < this.size; j++) {\n        if (this.board[i][j] === 0) {\n          emptyCells.push([i, j]);\n        }\n      }\n    }\n\n    return emptyCells;\n  }\n\n  addNewTile() {\n    const emptyCells = this.getEmptyCells();\n\n    if (emptyCells.length) {\n      const [row, col]\n        = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  moveHorizontal(direction) {\n    let moved = false;\n\n    for (let i = 0; i < this.size; i++) {\n      const row\n        = direction === 'left'\n          ? this.board[i].filter((x) => x !== 0)\n          : this.board[i].filter((x) => x !== 0).reverse();\n\n      const merged = this.mergeTiles(row);\n      const newRow\n        = direction === 'left'\n          ? [...merged, ...Array(this.size - merged.length).fill(0)]\n          : [...Array(this.size - merged.length).fill(0), ...merged.reverse()];\n\n      if (JSON.stringify(this.board[i]) !== JSON.stringify(newRow)) {\n        moved = true;\n      }\n      this.board[i] = newRow;\n    }\n\n    return moved;\n  }\n\n  moveVertical(direction) {\n    let moved = false;\n\n    for (let j = 0; j < this.size; j++) {\n      const column = this.board.map((row) => row[j]).filter((x) => x !== 0);\n\n      if (direction === 'down') {\n        column.reverse();\n      }\n\n      const merged = this.mergeTiles(column);\n      const newColumn\n        = direction === 'up'\n          ? [...merged, ...Array(this.size - merged.length).fill(0)]\n          : [...Array(this.size - merged.length).fill(0), ...merged.reverse()];\n\n      if (\n        JSON.stringify(this.board.map((row) => row[j]))\n        !== JSON.stringify(newColumn)\n      ) {\n        moved = true;\n      }\n\n      for (let i = 0; i < this.size; i++) {\n        this.board[i][j] = newColumn[i];\n      }\n    }\n\n    return moved;\n  }\n\n  mergeTiles(tiles) {\n    const merged = [];\n\n    for (let i = 0; i < tiles.length; i++) {\n      if (i < tiles.length - 1 && tiles[i] === tiles[i + 1]) {\n        const mergedValue = tiles[i] * 2;\n\n        merged.push(mergedValue);\n        this.score += mergedValue;\n\n        if (mergedValue === 2048 && !this.won) {\n          this.won = true;\n          this.status = 'win';\n        }\n        i++;\n      } else {\n        merged.push(tiles[i]);\n      }\n    }\n\n    return merged;\n  }\n\n  checkGameStatus() {\n    if (this.won) {\n      return;\n    }\n\n    // Check if there are any empty cells\n    if (this.getEmptyCells().length > 0) {\n      return;\n    }\n\n    // Check if any moves are possible\n    for (let i = 0; i < this.size; i++) {\n      for (let j = 0; j < this.size; j++) {\n        const current = this.board[i][j];\n        const neighbors = [\n          [i - 1, j],\n          [i + 1, j],\n          [i, j - 1],\n          [i, j + 1],\n        ];\n\n        for (const [ni, nj] of neighbors) {\n          if (ni >= 0 && ni < this.size && nj >= 0 && nj < this.size) {\n            if (this.board[ni][nj] === current) {\n              return;\n            }\n          }\n        }\n      }\n    }\n\n    this.status = 'lose';\n  }\n}\nmodule.exports = Game;\n","function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","import { _ as _array_with_holes } from \"./_array_with_holes.js\";\nimport { _ as _iterable_to_array_limit } from \"./_iterable_to_array_limit.js\";\nimport { _ as _non_iterable_rest } from \"./_non_iterable_rest.js\";\nimport { _ as _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nfunction _sliced_to_array(arr, i) {\n    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();\n}\nexport { _sliced_to_array as _ };\n","function _array_with_holes(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nexport { _array_with_holes as _ };\n","function _iterable_to_array_limit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n    if (_i == null) return;\n\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n\n    try {\n        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally {\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally {\n            if (_d) throw _e;\n        }\n    }\n\n    return _arr;\n}\nexport { _iterable_to_array_limit as _ };\n","function _non_iterable_rest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_rest as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n","function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","import { _ as _array_without_holes } from \"./_array_without_holes.js\";\nimport { _ as _iterable_to_array } from \"./_iterable_to_array.js\";\nimport { _ as _non_iterable_spread } from \"./_non_iterable_spread.js\";\nimport { _ as _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nexport { _to_consumable_array as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nexport { _array_without_holes as _ };\n","function _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) {\n        return Array.from(iter);\n    }\n}\nexport { _iterable_to_array as _ };\n","function _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_spread as _ };\n"],"names":["$3d28d7f1aac198f5$exports","$c3b10a83b523f372$export$71511d61b312f219","arr","len","length","i","arr2","Array","$d4f69c5c6c4654b1$export$71511d61b312f219","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","from","test","$efec029548ccee7f$export$71511d61b312f219","isArray","_s","_e","_i","Symbol","iterator","_arr","_n","_d","next","done","push","value","err","TypeError","$227c6742e0ff6f82$export$71511d61b312f219","iter","protoProps","Game","initialState","_this","instance","Constructor","size","score","status","board","fill","map","won","key","direction","moved","moveLeft","moveRight","moveUp","moveDown","addNewTile","checkGameStatus","moveHorizontal","moveVertical","isBoardEmpty","every","row","cell","emptyCells","j","getEmptyCells","_emptyCells_Math_floor","Math","floor","random","col","filter","x","reverse","merged","mergeTiles","newRow","concat","JSON","stringify","_loop","column","newColumn","tiles","mergedValue","current","neighbors","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","_step_value","ni","nj","return","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","document","addEventListener","updateBoard","state","game","getState","cells","gameBoard","querySelectorAll","forEach","index","className","classList","add","textContent","scoreElement","getScore","updateGameStatus","gameStatus","getStatus","startMessage","toggle","gameOverMessage","winMessage","startButton","querySelector","start","restart","e","move"],"version":3,"file":"index.d0f3fa38.js.map"}